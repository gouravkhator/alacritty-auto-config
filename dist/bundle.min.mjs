import r from"path";import{URL as o}from"url";import t from"yargs";import{hideBin as i}from"yargs/helpers";import e from"os";import n from"fs";import l from"yamljs";import{execSync as a}from"child_process";const f=/^0x([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$/,s=/^#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$/;function d(r){r=r.trim();if(!/^([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$/.test(r))throw new Error("Color code, provided in params, is neither in 3 letter format nor in 6 letter format..");if(3===r.length){let o="";for(let t=0;t<=2;t++)o+=r.charAt(t)+r.charAt(t);return o}return r}function c(r){if("string"==typeof r){if(!r||r&&""===r.trim())return;if(r=r.trim(),f.test(r))return"#"+d(r.substring(2));if(s.test(r))return"#"+d(r.substring(1));throw new Error("Color code is not provided in hex(0x) or hash(#) format..")}if("number"==typeof r){return"#"+d(r.toString(16))}}function u(r){if("string"==typeof r){if(!r||r&&""===r.trim())return;if(r=r.trim(),s.test(r))return"0x"+d(r.substring(1));if(f.test(r))return"0x"+d(r.substring(2));throw new Error("Color code is not provided in hex(0x) or hash(#) format..")}if("number"==typeof r){return"0x"+d(r.toString(16))}}function m(r={}){var o,e,n,l,a,f,s,d;const c="fontsize",m="bgcolor",v="fgcolor",p=10,y="#333333",h="#ffffff";return t(i(process.argv)).usage("Usage: node dist/$0 [options]=[values]\n\nThe options may/may not provided in the CLI. If they are not provided, all the defaults are set.").help("h").version("1.0.0").alias("s",c).alias("b",m).alias("c",v).alias("h","help").alias("v","version").default(c,null!==(e=null===(o=null==r?void 0:r.font)||void 0===o?void 0:o.size)&&void 0!==e?e:p).default(m,null!==(a=null===(l=null===(n=null==r?void 0:r.colors)||void 0===n?void 0:n.primary)||void 0===l?void 0:l.background)&&void 0!==a?a:y).default(v,null!==(d=null===(s=null===(f=null==r?void 0:r.colors)||void 0===f?void 0:f.primary)||void 0===s?void 0:s.foreground)&&void 0!==d?d:h).nargs({[c]:1,[m]:1,[v]:1}).describe(c,`Takes font size to be set in alacritty\t[default=${p}]`).describe(m,`Takes primary background color in #ffffff or #fff or 0xfff or 0xffffff format\t[default=${y}]`).describe(v,`Takes primary foreground color in #ffffff or #fff or 0xfff or 0xffffff format\t[default=${h}]`).check((r=>{if(r.s&&(parseFloat(r.s)<=0||parseFloat(r.s)>40))throw new Error(`Wrong Arguments: Provided font size ${r.s} should be within the range of display: 0.1 to 40.0`);if(r.b&&void 0===u(r.b))throw new Error(`Wrong Arguments: Provided background color ${r.b} should be in hash or hex format`);if(r.c&&void 0===u(r.c))throw new Error(`Wrong Arguments: Provided font color ${r.c} should be in hash or hex format`);return!0})).argv}function v(){if("Windows_NT"===e.type())throw new Error("Platform win32 not supported by our app");try{a("which alacritty")}catch(r){throw new Error("Package Not Installed: alacritty is not installed in your system or it's path is not set in your PATH variable, so you cannot use our library..")}const o=r.join(e.homedir(),".config/alacritty/alacritty.yml");return n.existsSync(o)||(n.mkdirSync(r.dirname(o),{recursive:!0}),n.writeFileSync(o,"")),o}function p(r){try{return l.load(r)}catch(r){throw new Error("Cannot load original alacritty config file from the path provided..")}}function y(o,t){const i="user_config_temp",e=r.resolve(i,"alacritty.json");n.mkdirSync(i,{recursive:!0}),n.writeFileSync(e,JSON.stringify(o),"utf8");const l=`npx json2yaml '${e}' --save -d 8 && mv '${r.resolve(i,"alacritty.yaml")}' '${r.resolve(i,"alacritty.yml")}' && cp '${r.resolve(i,"alacritty.yml")}' '${t}' && rm -rf user_config_temp`;a(l),console.log("Please close and reopen all windows of alacritty if some effects were not applied..")}function h(r={},o,t){var i,e,n,l,a,f,s,d;let c=null!==(n=null===(e=null===(i=null==r?void 0:r.colors)||void 0===i?void 0:i.primary)||void 0===e?void 0:e.background)&&void 0!==n?n:"",m=null!==(f=null===(a=null===(l=null==r?void 0:r.colors)||void 0===l?void 0:l.primary)||void 0===a?void 0:a.foreground)&&void 0!==f?f:"",v=null!==(d=null===(s=null==r?void 0:r.font)||void 0===s?void 0:s.size)&&void 0!==d?d:void 0,{primary_bgcolor:p=c,primary_fgcolor:h=m,fontsize:g=v}=o;if(p=u(p),h=u(h),g<.1||g>40)throw new Error("Font size provided is not in the range 0.1 to 40.0");const b=Object.assign(Object.assign({},r),{font:{size:g},colors:{primary:{background:p,foreground:h}}});return y(b,t),b}const g=new o(`file://${process.argv[1]}`);import.meta.url===g.toString()&&function(){let o="";try{o=v();let t=p(o);const i=r.dirname(o);let e=m(t);h(t,{fontsize:parseFloat(e.s),primary_bgcolor:e.b,primary_fgcolor:e.c},i)}catch(r){console.error(r)}}();export{v as configInit,d as convertShortToLongCode,c as convertToHash,u as convertToHex,h as editConfig,s as hash_color_regex,f as hex_color_regex,p as readOriginalConfig,m as takeArgumentInputs,y as writeToConfigFile};
